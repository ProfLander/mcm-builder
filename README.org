* MCM Builder
MCM Builder, originally authored by Igigog. Adopted from ModDB to GitHub by Lander.

** Examples
*** Basic Usage
True to its name, MCM Builder's primary function is to simplify the creation of MCM pages via builder pattern:

#+begin_src lua
local Tree = mcm_builder.Tree
local Page = mcm_builder.Page
local Checkbox = mcm_builder.Checkbox
local Title = mcm_builder.Title
local Line = mcm_builder.Line
local Description = mcm_builder.Description

function on_mcm_load()
   local tree = Tree.new("MCM_Builder")
   local page = Page.new("With Checkbox")
   local check = Checkbox.new("My_cool_checkbox"):default(true)
   page:add(check)

   local page_two = Page.new("With_description_and_line")
   local title = Title.new("uwu")
               :text("Title??? Omegalul")
               :color(200,100,50,255)
   page_two:add(title)
   page_two:add(Description.new("descr"):text("What a nice description"))
   page_two:add(Line.new())

   return tree:add_page(page):add_page(page_two):build()
end
#+end_src

*** Data Access
MCM builder's primitives can also be used as an object-oriented interface to their respective settings.

We begin by defining the root of our mod's MCM tree:

~my_mod_mcm.script~
#+begin_src lua
local Tree = mcm_builder.Tree

-- This time we expose our tree as a global reference
tree = Tree.new("TotallyTubular")

-- Trivial MCM entrypoint
function on_mcm_load()
   return tree:build()
end
#+end_src

From there, we can create a script for some subsystem or other (remembering to add an ~_mcm~ suffix to its name so it will load in time for MCM,) fetch a reference to our tree, and add a page:

~my_mod_system_mcm.script~
#+begin_src lua
local tree = my_mod_mcm.tree

-- Subsystems in other scripts
-- (which must themselves have an `_mcm` suffix for proper load behaviour)
-- are free to fetch a reference to it and define new child elements:
page = tree:pages("Stuff")
#+end_src

Let's assume our subsystem has some sub-subsystem; it can fetch a reference to the page we just created and inject MCM settings into it like so:

~my_mod_system_subsystem_mcm.script~
#+begin_src lua
local page = my_mod_system_mcm.page

-- Likewise, code downstream of page creators is also free
-- to fetch and populate via reference:
gubbin = page:settings(Checkbox.new("Gubbin"):default(false))

-- Trees can also nest one level within other trees:
nest_tree = tree:subtrees("Things")
nest_page = nest_tree:pages("Stuff")

-- The `trees`, `pages` and `settings` functions are variadic
-- in both input and output for more ergonomic definition:
foo, bar = page:settings(
   Checkbox.new("Foo"):default(true),
   Trackbar.new("Bar"):default(1),
)

-- Easy peasy runtime code
function actor_on_update()
   -- Simple fetching
   printf("Gubbin from MCM: %s", gubbin:get())
   printf("Foo from MCM: %s", foo:get())

   -- The getter method takes an optional function parameter,
   -- which receives the control's MCM path as a list,
   -- and returns a fallback value for cases where
   -- MCM values are unavailable or unset
   printf("Bar from MCM: %s", bar:get(function(path) return 3.141 end))
end

function on_game_start()
   RegisterScriptCallback("actor_on_update", actor_on_update)
end
#+end_src

This approach allows definition and access to be localized in scripts where they're most relevant, better-integrating them with the rest of codebase and avoiding the creation of a monolithic 'MCM sin-bin' script.

** Original description:

A love letter to Mod Configuration Menu. Only usable to modders with programming background, probably.

Imagine Object-Oriented MCM. Now you have it. It is quite nice, if you ask me.

*** FAQ

- Why?
  - Looks nice. Feels nice. Reads nice. And I actually can see which class what methods has.

- Is it slower than native MCM? Is it slow? Is it so enormously slow I could actually feel the difference?

  - Very yes. Very very yes. Probably no, but need to check with many addons at once.

- How does it even look?
  - Check out example function at the bottom of the script.

- Are you having the time of your life? Are you okay?
  - Absolutely. Absolutely no.

- When Tasks stable?
  - Tasks stable not today.
