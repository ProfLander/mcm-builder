assert(string.find(ui_mcm.VERSION, "1.%d.%d"), "MCM Builder: Unsupported MCM version")

--- Not an actual metatable, just a collection of methods used by the rest
AbstractOption = {}

--- Tells the script what kind of value the option is storing / dealing with
function AbstractOption:input_type(typ)
   if typ == "string" then
      self.val = 0
   elseif typ == "boolean" then
      self.val = 1
   elseif typ == "float" then
      self.val = 2
   else
      assert(nil, "MCM Builder: unknown type: "..tostring(typ))
   end
   return self
end

--- Tie an option to a console command, refer to MCM manual for documentation
function AbstractOption:cmd(cmd)
   assert(not self.def, "MCM Builder: default value does not work with cmd enabled")
   self.cmd = cmd
   return self
end

--- value or table {function, parameters}
--- Default value of an option
function AbstractOption:default(def)
   assert(not rawget(self,"cmd"), "MCM Builder: default value does not work with cmd enabled")
   if type(def) == "table" then
      assert(type(def[1]) == "function", "MCM Builder: default table without a function")
   end
   self.def = def
   return self
end

--- table {function, parameters}
--- get current value of an option by executing
--- the declared function, instead of reading it from axr_options.ltx
function AbstractOption:current_value(curr)
   assert(type(curr[1]) == "function", "MCM Builder: current value without a function")
   self.curr = curr
   return self
end

--- table {function, parameters}
--- Execute a function when option's changes get applied
            -- The value of the option is added to the end of the parameters list.
function AbstractOption:callback(tbl)
   assert(type(tbl[1]) == "function", "MCM Builder: callback without a function")
   self.functor = tbl
   return self
end

--- String to show, it will be translated
function AbstractOption:text(text)
   self.text = text
   return self
end

--- Override default name / desc rule to replace
--- the translation of an option with a custom one,
--- should be set without "ui_mcm_" and "_desc"
function AbstractOption:hint(hint)
   self.hint = hint
   return self
end

--- determines the color of the text
function AbstractOption:color(r, g, b, a)
   assert(type(a + r + g + b) == "number", "MCM: invalid color representation")
   self.clr = {a,r,b,g}
   return self
end

--- Minimum/maximum for an option
function AbstractOption:minmax(min, max)
   assert(self.val == 2, "MCM Builder: minmax does not work if input type is not float")
   assert(min + max, "MCM Builder: bad minmax values")
   self.min = min
   self.max = max
   return self
end

--- table {double pairs}
--- Declares option's selection list
function AbstractOption:content_pairs(content)
   for _, v in ipairs(content) do
      assert(#v == 2, "MCM Builder: not a pair")
   end
   self.content = content
   return self
end

--- Link to texture you want to show
function AbstractOption:image(link)
   self.link = link
   return self
end

--- Usually, the 2nd key of pairs in content table are
--- strings to show on the UI, by translating "opt_str_lst_(string)".
--- When we set [no_str] to true, it will show
--- the string from table as it is without
--- translations or "opt_str_lst_"
--- For TrackBars: no_str won't show value next to the slider
function AbstractOption:dont_translate()
   self.no_str = true
   return self
end

--- table {function, parameters}
--- Show the option on UI if the precondition function returns true
function AbstractOption:precondition(prec)
   assert(type(prec[1]) == "function", "MCM Builder: precondition without a function")
   self.precondition = prec
   return self
end

--- table {function, parameters}
--- Option won't execute its functor when changes are applied,
--- unless if the postcondition function returns true
function AbstractOption:postcondition(postc)
   assert(type(postc[1]) == "function", "MCM Builder: postcondition without a function")
   self.postcondition = postc
   return self
end

--- Container for generalized MCM getters and setters
AbstractLens = {}

function AbstractLens:key()
   return table.concat(self.path, "/")
end

function AbstractLens:get(d)
   local out = nil

   if ui_mcm then
      out = ui_mcm.get(self:key())
   end

   if out == nil and d then
      out = d(self.path)
   end

   if out == nil then
      out = self.def
   end

   return out
end

function AbstractLens:set(v)
   if ui_mcm then
      ui_mcm.set(self:key(), v)
   end
end

--- Structural element; You'll probably need at least one to start.
--- Don't forget to :build() at the end.
Tree = {
   _cls = "Tree",

   text = AbstractOption.text,
}

function Tree.new(id, collection)
   assert(type(id) == "string", "MCM Builder: no id given")
   local t = {
      id = id,
      path = {id},
      col = collection,
      sh = false,
      gr = {}
   }
   setmetatable(t, {__index = Tree})
   return t
end

--- Add another Tree on the next MCM level
function Tree:add_subtree(subtree)
   assert(subtree._cls == "Tree", "MCM Builder: not a Tree")
   assert(not subtree._subtree, "MCM Builder: Tree too deep")
   subtree._subtree = true    -- only can add pages to subtree
   self._subtree = true      -- can't add self to another tree
   self.gr[#self.gr+1] = subtree
   return self
end

--- Add Page. Page is final destination.
function Tree:add_page(page)
   assert(page._cls == "Page", "MCM Builder: not a Page")
   self.gr[#self.gr+1] = page
   return self
end

--- Create a copy of our table minus OOP features and builder data
function Tree:build()
   local out = {}
   copy_table(out, self)
   out._subtree = nil

   -- Recurse on table children
   for _, v in pairs(self) do
      if type(v) == "table" then
         Tree.build(v)
      end
   end

   -- Done, return both the resulting struct
   -- and any collection ID that may be set on the tree
   return out, self.col
end

--- Allows you to give options tree a group id,
--- to connect them when you want to use "Apply to all"
--- button for options
function Tree:group(group_id)
   assert(type(group_id) == "string", "MCM Builder: not a text")
   self.id_gr = group_id
   self.apply_to_all = true
   return self
end

--- Populate the collection ID field:
--- If non-nil when `build` is called, the collection will be
--- returned as its second value.
--- If passed directly back to MCM, this will cause it to
--- attach the resulting tree to an existing one with the given ID
--- instead of creating a new root menu entry.
function Tree:collection(collection)
   assert(type(collection) == "string", "MCM Builder: no collection given")
   self.collection = collection
   return self
end

--- Smart page constructor
--- Variadic on both input and output for ergonomic multi-binding
function Tree:pages(...)
   local ids = {...}
   local out = {}

   for i,id in ipairs(ids) do
      assert(id, string.format("Invalid page ID at index %s", i))
      local page = Page.new(id)
      self:add_page(page)
      page.path = {}
      copy_table(page.path, self.path)
      table.insert(page.path, id)
      table.insert(out, page)
   end

   return unpack(out)
end

--- Smart subtree constructor
--- Variadic on both input and output for ergonomic multi-binding
function Tree:subtrees(...)
   local ids = {...}
   local out = {}

   for i,id in ipairs(ids) do
      assert(id, string.format("Invalid tree ID at index %s", i))
      local tree = Tree.new(id)
      self:add_subtree(tree)
      tree.path = {}
      copy_table(tree.path, self.path)
      table.insert(tree.path, tree.id)
      table.insert(out, tree)
   end

   return unpack(out)
end

--- Final destination; Options are added to this one.
--- Is added to a Tree, choosing it gives you the page
--- You probably can use it without a Tree, if you only need
--- one page.
Page = {
   _cls = "Page",

   group = Tree.group,
   text = AbstractOption.text,
   build = Tree.build,
   precondition = AbstractOption.precondition,
}

function Page.new(id)
   assert(type(id) == "string", "MCM Builder: no id given")
   local t = {id=id, sh=true, gr={}}
   setmetatable(t, {__index = Page})
   return t
end

-- Add widget to self
function Page:add(widget)
   assert(widget._widget, "MCM Builder: Trying to add not a widget")
   self.gr[#self.gr+1] = widget
   return self
end

-- Add everything from another Page to self
function Page:merge(page)
   assert(page._cls == "Page", "MCM Builder: not a Page")
   for _, widget in pairs(page.gr) do
      self:add(widget)
   end
   return self
end

-- Text to show when precondition fails
function Page:text_on_fail(text)
   assert(type(text) == "string", "MCM Builder: not a text")
   self.output = text
   return self
end

--- Smart setting constructor
--- Variadic on both input and output, for ergonomic multi-binding
function Page:settings(...)
   local settings = {...}
   local out = {}
   for i,setting in ipairs(settings) do
      assert(setting, string.format("Invalid setting at index %s", i))
      self:add(setting)
      setting.path = {}
      copy_table(setting.path, self.path)
      table.insert(setting.path, setting.id)
      table.insert(out, setting)
   end

   return unpack(out)
end

--- Literally boolean option, no bells and whistles
Checkbox = {
   _cls = "Checkbox",
   _widget = true,


   default = AbstractOption.default,
   hint = AbstractOption.hint,
   cmd = AbstractOption.cmd,

   precondition = AbstractOption.precondition,
   callback = AbstractOption.callback,
   postcondition = AbstractOption.postcondition,

   current_value = AbstractOption.current_value,

   key = AbstractLens.key,
   get = AbstractLens.get,
   set = AbstractLens.set,
}

function Checkbox.new(id)
   assert(type(id) == "string", "MCM Builder: no id given")
   local t = {id=id, type = "check", val = 1}
   setmetatable(t, {__index = Checkbox})
   return t
end

--- List of strings, useful for options with many selections
List = {
   _cls = "List",
   _widget = true,

   default = AbstractOption.default,
   content_pairs = AbstractOption.content_pairs,
   input_type = AbstractOption.input_type,
   cmd = AbstractOption.cmd,
   dont_translate = AbstractOption.dont_translate,

   precondition = AbstractOption.precondition,
   callback = AbstractOption.callback,
   postcondition = AbstractOption.postcondition,

   current_value = AbstractOption.current_value,
   hint = AbstractOption.hint,

   key = AbstractLens.key,
   get = AbstractLens.get,
   set = AbstractLens.set,
}

function List.new(id)
   assert(type(id) == "string", "MCM Builder: no id given")
   local t = {id=id, type = "list", val = 0}
   setmetatable(t, {__index = List})
   return t
end

function List:content(tbl)
   self.content = tbl
   return self
end

--- Input box, you can type a value of your choice
InputField = {
   _cls = "InputField",
   _widget = true,

   default = AbstractOption.default,
   minmax = AbstractOption.minmax,
   input_type = AbstractOption.input_type,
   cmd = AbstractOption.cmd,

   precondition = AbstractOption.precondition,
   callback = AbstractOption.callback,
   postcondition = AbstractOption.postcondition,

   current_value = AbstractOption.current_value,
   hint = AbstractOption.hint,

   key = AbstractLens.key,
   get = AbstractLens.get,
   set = AbstractLens.set,
}

function InputField.new(id)
   assert(type(id) == "string", "MCM Builder: no id given")
   local t = {id = id, type = "input", val = 0}
   setmetatable(t, {__index = InputField})
   return t
end

--- Radio box, select one out of many choices.
RadioBox = {
   _cls = "RadioBox",
   _widget = true,

   input_type = AbstractOption.input_type,
   cmd = AbstractOption.cmd,
   dont_translate = AbstractOption.dont_translate,

   precondition = AbstractOption.precondition,
   callback = AbstractOption.callback,
   postcondition = AbstractOption.postcondition,

   current_value = AbstractOption.current_value,
   hint = AbstractOption.hint,

   key = AbstractLens.key,
   get = AbstractLens.get,
   set = AbstractLens.set,
}

function RadioBox.new(id)
   assert(type(id) == "string", "MCM Builder: no id given")
   local t = {id = id, type = "radio_h", val = 0}
   setmetatable(t, {__index = RadioBox})
   return t
end

function RadioBox:vertical()
   -- Makes vertical, lol
   self.type = "radio_v"
   self.force_horz = nil
   return self
end

--- Force the radio buttons into horizontal layout, regardless of number
function RadioBox:force_horizontal()
   assert(
      self.type == "radio_h",
      "MCM Builder: force_horizontal on vertical radiobox"
   )
   self.force_horz = true
   return self
end

--- Track bar, easy way to control numeric options with min/max values
Trackbar = {
   _cls = "Trackbar",
   _widget = true,

   minmax = AbstractOption.minmax,
   default = AbstractOption.default,
   cmd = AbstractOption.cmd,
   dont_translate = AbstractOption.dont_translate,

   precondition = AbstractOption.precondition,
   callback = AbstractOption.callback,
   postcondition = AbstractOption.postcondition,

   current_value = AbstractOption.current_value,
   hint = AbstractOption.hint,

   key = AbstractLens.key,
   get = AbstractLens.get,
   set = AbstractLens.set,
}

function Trackbar.new(id)
   assert(type(id) == "string", "MCM Builder: no id given")
   local t = {id=id, type = "track", val = 2, min = 0, max = 2, step = 0.1, def = 1}
   setmetatable(t, {__index = Trackbar})
   return t
end

--- USE increment INSTEAD! THIS ONE WILL CRASH.
function Trackbar:step(step)
   assert(type(step) == "number", "MCM Builder: step is not a number")
   self.step = step
   return self
end

function Trackbar:increment(step)
   -- Set step
   assert(type(step) == "number", "MCM Builder: step is not a number")
   self.step = step
   return self
end

function Trackbar:precision(prec)
   -- allowed number of zeros in a number
   self.prec = prec
   return self
end

--- Button that registers a keypress after being clicked.
KeybindBox = {
   _cls = "KeybindBox",
   _widget = true,

   cmd = AbstractOption.cmd,
   precondition = AbstractOption.precondition,
   hint = AbstractOption.hint,
   default = AbstractOption.default,

   key = AbstractLens.key,
   get = AbstractLens.get,
   set = AbstractLens.set,
}

function KeybindBox.new(id)
   assert(type(id) == "string", "MCM Builder: no id given")
   local t = {id=id, type = "key_bind", val = 2}
   setmetatable(t, {__index = KeybindBox})
   return t
end

--- Literally a useless line
Line = {
   _cls = "Line",
   _widget = true,
}

function Line.new()
   local t = {id = "line", type = "line"}
   setmetatable(t, {__index = Line})
   return t
end

--- Literally a useless image
Image = {
   _cls = "Image",
   _widget = true,

   image = AbstractOption.image,
}

function Image.new(id)
   assert(type(id) == "string", "MCM Builder: no id given")
   local t = {id=id, type="image"}
   setmetatable(t, {__index = Image})
   return t
end

--- Useless image on the left, maybe useful text on the right
ImageWithText = {
   _cls = "ImageWithText",
   _widget = true,
   image = AbstractOption.image,
   text = AbstractOption.text,
}

function ImageWithText.new(id)
   assert(type(id) == "string", "MCM Builder: no id given")
   local t = {id=id, type="slide", size={512,50}}
   setmetatable(t, {__index = ImageWithText})
   return t
end

--- custom size for the texture
function ImageWithText:size(size)
   assert(#size == 2, "MCM Builder: unknown size type")
   self.size = size
   return self
end

--- force the texture to stretch or not
function ImageWithText:stretch()
   self.stretch = true
   return self
end

--- position
function ImageWithText:position(x, y)
   assert(x + y, "MCM Builder: bad position arguments")
   self.pos = {x, y}
   return self
end

--- height offset to add extra space
function ImageWithText:v_offset(offset)
   assert(type(offset) == "number", "MCM Builder: offset is not a number")
   self.spacing = offset
   return self
end

--- Big fucking text
Title = {
   _cls = "Title",
   _widget= true,
   color = AbstractOption.color,
   text = AbstractOption.text,
}

function Title.new(id)
   assert(type(id) == "string", "MCM Builder: no id given")
   local t = {id = id, type = "title", align = "c"}
   setmetatable(t, {__index = Title})
   return t
end

--- determines the alignment of the title
function Title:align(str)
   if str == "center" then
      self.align = 'c'
   elseif str == "right" then
      self.align = 'r'
   elseif str == "left" then
      self.align = 'l'
   else
      assert(nil, "MCM Builder: unknown alignment: "..str)
   end

   return self
end

--- Small text, left alignment
Description = {
   _cls = "Description",
   _widget = true,
   text = AbstractOption.text
}

function Description.new(id)
   assert(type(id) == "string", "MCM Builder: no id given")
   local t = {id = id, type = "desc"}
   setmetatable(t, {__index = Description})
   return t
end

--- Getter fallback for retrieving defaults
--- from a table with comparable structure.
---
--- Not actually that useful in light of controls storing
--- their own defaults and being able to fall back on those,
--- but included for didactic purposes.
--- (And because default tables are a common pattern.)
---
---@param tbl table
---@return fun(path: table): any
default_table = function(tbl)
   return function(path)
      local focus = tbl
      for i,k in ipairs(path) do
         focus = focus[k]
         assert(
            focus ~= nil,
            string.format("Invalid key at index %s: %s", i, k)
         )
      end
      return focus
   end
end
